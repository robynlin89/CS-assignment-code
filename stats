#!/bin/bash	

#Assignment 1
#Course: CS 344
#Program name: stats
#Author: Robyn Lin
#Due date: 7/6/15
#Description: This bash shell script reads an input file and calculates the average and median for the rows or columns (based on user input), and outputs the results in a specified format.

function rowSort { for i in ${arrayRow[@]}; do echo "$i"; done| sort -n;}	#function to sort an array of rows in ascending order
function colSort { for j in ${arrReadCols[@]}; do echo "$j"; done| sort -n;}	#function to sort an array of columns in ascending order

TMP=ps$$
trap "rm -f $TMP; exit 1" INT HUP TERM	#use trap to catch interrupt, hangup, terminate signals

if [ "$#" -ne 1 -a "$#" -ne 2 ]	#check for correct # of arguments; should be 1 or 2 arguments
then
   echo "./stats {-rows|-cols} [file]" >&2	#if incorrect # of arguments, output error message
   exit 1
fi

if [ $# -ge 1 -a -f "$2" ] 	#if argument 2 exists and is a file
then
   input="$2" 
elif [ $# -eq 1 ]	#else if no argument 2 given
then
   cat /dev/stdin > ps$$	#read from stdin, set input to stdin
   input=ps$$	#use process id as part of file name
   trap "rm -f $input; exit 1" INT HUP TERM	#use trap to catch interrupt, hangup, terminate signals, this removes any temp files
fi

str=$1	#define string variable for 1st argument
str1=${str:0:2}	#extract first 2 characters from argument 1
if [ "$1" = "-rows" -o "$str1" = "-r" ]	#check if user entered valid row argument
then
   echo "Average Median"
   if [ -r $input ] 	#if can read file
   then	
      colCount=$(awk '{print NF}' $input | sort -nu | tail -n 1) #find # of columns in file 
      while IFS= read -r line	#while there are lines to read
      do
	total=0		#reset back to 0 for each row
        i=0
	for num in $line
	do
	   total=`expr $total + $num`	#calc total
	   arrayRow[i]=$num	#store each num into array
	   i=$(($i + 1))	#increment i
	done <$input	
	rem=`expr $total % $colCount`	#calc remainder
        remComparison=`expr $rem \* 2`  #2*remainder for comparison
        if [ $remComparison -ge $colCount ]	#if 2*remainder >= to divisor
        then
	  avg=$(( (($total + ($colCount /2) )) / $colCount ))	#round result up
        else
	  avg=`expr $total / $colCount`	#else use default rounding in bash
        fi
	sortedArray=( $(rowSort) )	#sort array
	arrayLength=${#sortedArray[@]}	#find array length
	oddEvenElems=`expr $arrayLength % 2`	#test if # of elements is odd or even 
	if [ $oddEvenElems -ne 0 ]	#if # of elements is odd
	then
	   echo "$avg	${sortedArray[$arrayLength / 2]}"	#display avg and median
	elif [ $oddEvenElems -eq 0 ] 	#if # of elements is even
	then
	   echo "$avg	${sortedArray[$arrayLength / 2]}"	#display avg and median
	fi
   done <$input
   else	#if can't open input, echo error msg and exit val 1 
	echo "./stats: cannot read $input" >&2
	exit 1
   fi

elif [ "$1" = "-cols" -o "$str1" = "-c" ]		#check if user entered cols
then
   if [ -r $input ] 	#if can read file
   then	
      if [ -s $input ] 	#if file size is not 0
      then
   	echo "Averages:"
   	rowCount=$(cat $input | wc -l) #find number of rows in file
   	colCount=$(awk '{print NF}' $input | sort -nu | tail -n 1) #find # of columns in file 
   	arrayCol=($(awk '{for (i=1;i<=NF;i++) sum[i]+=$i;}; END{for (i=1;i in sum;i++) print sum[i]}' $input))	#sum each column and store to array
   	for ((i=0;i<$colCount;i++))	#calculate avg for each array element
   	do
      	   a=${arrayCol[i]}	#assign array element to variable a
      	   remArray[i]=`expr $a % $rowCount`	#calculate remainder
      	   remComparison=$((${remArray[i]} * 2))  #2*remainder for comparison
      	   if [ $remComparison -ge $rowCount ]	#if 2*remainder >= to divisor
      	   then
		arrayCol[i]=$(( (($a + ($rowCount / 2) )) / $rowCount ))	#round result up
      	   else
		arrayCol[i]=`expr $a / $rowCount`	#use default rounding in bash
           fi
  	done <$input
   	for (( j=0; j<${#arrayCol[@]}; j++))	#display array avg results
   	do
      	   arrayCol[j]=${arrayCol[j]}"	"	#insert tab in between each term
   	done <$input
   	echo "${arrayCol[@]}"	#echo array avg results

   	echo "Medians:"
   	k=1
   	while [ $k -le $colCount ]	#repeat process for each column in file
   	do
      	   arrReadCols=($(cut -f$k $input))	#read columns from file into array
      	   sortedArray=( $(colSort) )	#sort array
      	   arrayLength=${#sortedArray[@]}	#find array length
      	   oddEvenElems=`expr $arrayLength % 2` 	#test if # of elements is odd or even 
      	   if [ $oddEvenElems -ne 0 ]	#if # of elements is odd 
      	   then
         	echo -n "${sortedArray[$arrayLength / 2]}	 "	#display median
      	   elif [ $oddEvenElems -eq 0 ] 	#if # of elements is even
      	   then
         	echo -n "${sortedArray[$arrayLength / 2]}	 "	#display median
      	   fi
         k=$(($k + 1))	#increment k 
   	done <$input
   	echo ""	#print newline
   	else		#file size is 0
      	   echo "Averages:"
      	   echo ""	#print newline
      	   echo "Medians:"

   fi
   else	#if can't open input file, echo error msg and exit val 1
 	echo "./stats: cannot read $input" >&2
	exit 1
   fi
else	#user did not enter correct rows or cols input
	echo "./stats {-rows|-cols} [file]" >&2	#output error message
	exit 1
fi

if [ $# -eq 1 ]	#if input file was written to temp file (read in as stdin), remove it
then
   rm $input 2> /dev/null
fi
